var Tower = function (settings) {
	var tower = Square(settings.gx, settings.gy, settings.color);
	Object.extend(tower, settings);
	tower.set_range = function (range) {
		tower.range = range;
		tower.prange = range * SET.pixels_per_square;
	};
	tower.account_for_terrain = function () {
		var terrain = get_terrain_at(this.gx, this.gy);
		this.damage = this.damage * terrain.tower_damage_modifier;
		this.set_range(this.range * terrain.tower_range_modifier);
		this.reload_rate = this.reload_rate * terrain.tower_frequency_modifier;
	};
	tower.set_range(3.5);
	tower.angle = 0;
	tower.damage = 5.0;
	tower.attack = function (creep) {};
	var mid = center_of_square(tower.gx, tower.gy);
	tower.x_mid = mid.x;
	tower.y_mid = mid.y;
	tower.fired_at = 0;
	tower.reload_rate = 1000;
	tower.Atargetx = -10;
	tower.Atargety = -10;
	tower.upgrade_cost = 100;
	tower.shots_per_volley = 12;
	tower.shots_left_in_volley = tower.shots_per_volley;
	tower.pause_after_volley = 2000;
	tower.finish_reload_at = 0;
	tower.reloading = false;
	tower.fire_next_at = 0;
	tower.sale_value = 50;
	
	tower.weapon_ready = function () {
		if (SET.now - tower.fired_at > tower.reload_rate) {
			tower.fired_at = SET.now;
			return true;
		}
		return false;
	};
	
	tower.update = function () {
		var creeps = SET.rendering_groups[SET.zIndex.creep];
		if (creeps.length == 0){
		return;
		};
			
		var closest_creep;
		var closest_distance;
		creeps.forEach(function (creep) {
			var distance = dist(tower.x_mid, tower.y_mid, creep.x, creep.y);
			if (distance < tower.prange) {
				if (!closest_creep) {
					closest_creep = creep;
					closest_distance = distance;
				} else {
					if (distance < closest_distance) {
						closest_creep = creep;
						closest_distance = distance;
					};
				};
			};
		});
		if (closest_creep) {
			this.Atargetx = closest_creep.x;
			this.Atargety = closest_creep.y;
			this.angle = Math.atan2((this.Atargety - this.y_mid), (this.Atargetx - this.x_mid));
		};
		
		if (closest_creep && tower.weapon_ready() == true)
			tower.attack(closest_creep);
	};
	
	tower.sell = function () {
		SET.gold += Math.floor(this.sale_value * 0.75);
		this.is_dead = function () {
			return true;
		};
		SET.grid_cache_at(this.gx, this.gy).tower = undefined;
		
		unselect();
	}
	tower.applyUpgradeModifier = function () {};
	tower.upgrade = function () {
		if (SET.gold >= this.upgrade_cost) {
			SET.gold -= this.upgrade_cost;
			this.sale_value = Math.floor(this.sale_value + this.upgrade_cost);
			this.upgrade_cost = Math.floor(this.upgrade_cost * 1.5);
			this.applyUpgradeModifier();
			unselect();
			SET.state = new TowerSelectMode();
			SET.state.set_up(this.x_mid, this.y_mid);
		} else
			error("You don't have enough gold to upgrade, you need " + (this.upgrade_cost - SET.gold) + " more.");
	};
	tower.display_stats = function () {
		WIDGETS.tower_type.innerHTML = this.type;
		WIDGETS.tower_range.innerHTML = this.range;
		WIDGETS.tower_damage.innerHTML = this.damage;
		WIDGETS.tower_rate.innerHTML = this.reload_rate;
		WIDGETS.tower_sell_button.innerHTML = "Sell tower for " + Math.floor(this.sale_value * 0.75) + " gold!";
		WIDGETS.tower_upgrade_button.innerHTML = "<u>U</u>pgrade for " + Math.floor(this.upgrade_cost) + " gold!";
		
		WIDGETS.tower_upgrade_button.onclick = function () {
			tower.upgrade();
		}
		WIDGETS.tower_sell_button.onclick = function () {
			tower.sell();
			reset_pathfinding();
			
		}
		WIDGETS.tower.style.display = "block";
	};
	tower.draw = function () {
		SET.addLight(this.x_mid,this.y_mid,this.prange);
		context.save();
		context.shadowOffsetX = 5;
		context.shadowOffsetY = 5;
		context.shadowColor = "black";
		context.shadowBlur = 10;
		context.fillStyle = this.color;
		var pos = grid_to_pixel(this.gx, this.gy);
		var h = SET.half_pixels_per_square;
		var l = SET.pixels_per_square;
		
		context.save();
		context.lineWidth = 2;
		context.strokeStyle = "rgba(0,0,0,1)";
		context.beginPath();
		context.moveTo(pos.x + h, pos.y + h);
		context.arc(pos.x + h, pos.y + h, (l - 1) / 2, 0, Math.PI * 2, false);
		context.closePath();
		context.stroke();
		context.fill();
		context.restore();
		var barrelLength = 20;
		var ix = this.x_mid + barrelLength * Math.cos(this.angle);
		var iy = this.y_mid + barrelLength * Math.sin(this.angle);
		context.lineWidth = 6;
		context.strokeStyle = "rgba(0,0,0,1)";
		context.beginPath();
		context.moveTo(this.x_mid, this.y_mid);
		context.lineTo(ix, iy);
		context.closePath();
		context.stroke();
		context.lineWidth = 2;
		context.strokeStyle = "rgba(100,100,100,1)";
		context.beginPath();
		context.moveTo(this.x_mid, this.y_mid);
		context.lineTo(ix, iy);
		context.closePath();
		context.stroke();
		context.restore();
		
		context.save();
		context.lineWidth = 2;
		context.strokeStyle = "#FF0000";
		context.lineWidth = 2;
		context.strokeStyle = "rgba(0,0,0,1)";
		context.beginPath();
		context.moveTo(this.Atargetx, this.Atargety);
		context.arc(this.Atargetx, this.Atargety, 10, 0, Math.PI * 2, false);
		context.closePath();
		context.stroke();
		context.fill();
		context.restore();
		
	}
	assign_to_depth(tower, SET.zIndex.tower);
	return tower;
};

var MissileTower = function (gx, gy) {
	var obj = Tower({
			gx : gx,
			gy : gy,
			color : color(250, 150, 50)
		});
	obj.type = "Missile Tower";
	obj.damage = 100;
	obj.upgrade_cost = 100;
	obj.sale_value = 100;
	obj.set_range(4);
	obj.reload_rate = 100;
	obj.shots_per_volley = 3;
	obj.shots_left_in_volley = obj.shots_per_volley;
	obj.pause_after_volley = 3000;
	obj.finish_reload_at = 0;
	obj.reloading = false;
	obj.fire_next_at = 0;
	obj.account_for_terrain();
	
	obj.weapon_ready = function () {
		if (obj.reloading && obj.finish_reload_at < SET.now) {
			obj.shots_left_in_volley = obj.shots_per_volley;
			obj.reloading = false;
		}
		if (!obj.reloading && obj.fire_next_at < SET.now) {
			return true;
		}
		return false;
	};
	
	obj.attack = function (creep) {
		assign_to_depth(Missile(this, creep), SET.zIndex.bullet);
				//assign_to_depth(Bullet(this, creep), SET.zIndex.bullet);
		obj.shots_left_in_volley--;
		obj.fire_next_at = SET.now + obj.reload_rate;
		if (obj.shots_left_in_volley < 1) {
			obj.reloading = true;
			obj.finish_reload_at = SET.now + obj.pause_after_volley;
		}
	}
	obj.applyUpgradeModifier = function () {
		this.damage = Math.floor(this.damage * 2.5);
		this.set_range(this.range + 0.5);
		this.speed *= 1.1;
	};
	return obj;
};

var LaserTower = function (gx, gy) {
	var obj = Tower({
			gx : gx,
			gy : gy,
			color : color(90, 150, 50)
		});
	obj.type = "Laser Tower";
	obj.upgrade_cost = 25;
	obj.sale_value = 13;
	obj.damage = 5;
	obj.set_range(4);
	obj.reload_rate = 250;
	obj.account_for_terrain();
	
	obj.attack = function (creep) {
		assign_to_depth(Laser(this, creep), SET.zIndex.bullet);
	};
	
	obj.applyUpgradeModifier = function () {
		this.damage = Math.floor(this.damage * 2.0);
		this.set_range(this.range + 0.25);
		this.reload_rate = this.reload_rate - 10;
	};
	
	return obj;
};

var CannonTower = function (gx, gy) {
	var obj = Tower({
			gx : gx,
			gy : gy,
			color : color(100, 120, 140)
		});
	obj.type = "Cannon Tower";
	obj.attack = function (creep) {
		assign_to_depth(CannonBall(this, creep), SET.zIndex.bullet);
	};
	obj.upgrade_cost = 75;
	obj.sale_value = 50;
	obj.applyUpgradeModifier = function () {
		this.damage = Math.floor(this.damage * 2.0);
		this.set_range(this.range + 0.25);
		this.reload_rate = this.reload_rate - 10;
	};
	obj.damage = 100;
	obj.set_range(4);
	obj.reload_rate = 1000;
	obj.account_for_terrain();
	return obj;
};

var GatlingTower = function (gx, gy) {
	var obj = Tower({
			gx : gx,
			gy : gy,
			color : color(250, 250, 50)
		});
	obj.type = "Gatling Tower";
	obj.damage = 50;
	obj.upgrade_cost = 25;
	obj.sale_value = 50;
	obj.set_range(3.5);
	
	obj.reload_rate = 100;
	obj.shots_per_volley = 12;
	obj.shots_left_in_volley = obj.shots_per_volley;
	obj.pause_after_volley = 2000;
	obj.finish_reload_at = 0;
	obj.reloading = false;
	obj.fire_next_at = 0;
	
	obj.weapon_ready = function () {
		if (obj.reloading && obj.finish_reload_at < SET.now) {
			obj.shots_left_in_volley = obj.shots_per_volley;
			obj.reloading = false;
		}
		if (!obj.reloading && obj.fire_next_at < SET.now) {
			return true;
		}
		return false;
	};
	
	obj.attack = function (creep) {
		assign_to_depth(Bullet(this, creep), SET.zIndex.bullet);
		obj.shots_left_in_volley--;
		obj.fire_next_at = SET.now + obj.reload_rate;
		if (obj.shots_left_in_volley < 1) {
			obj.reloading = true;
			obj.finish_reload_at = SET.now + obj.pause_after_volley;
		}
	}
	obj.applyUpgradeModifier = function () {
		this.damage = Math.floor(this.damage * 2.0);
		this.set_range(this.range + 0.25);
		this.reload_rate = this.reload_rate - 10;
	};
	obj.account_for_terrain();
	return obj;
};
